import{_ as t,o as a,c as o,S as e}from"./chunks/framework.a3dd33a8.js";const l="/doc/assets/1702262211025.d69b25af.png",s="/doc/assets/1702202102986.e338ffd4.png",r="/doc/assets/1702202136736.2857bc82.png",i="/doc/assets/1702202185998.f9c228a7.png",p="/doc/assets/1702202251348.f7e91949.png",c="/doc/assets/1702202353571.9a93f607.png",n="/doc/assets/1702202372380.6d3647e7.png",d="/doc/assets/1702202511502.c0b06b0b.png",u="/doc/assets/1702202540222.003a739a.png",A=JSON.parse('{"title":"模型即代码","description":"","frontmatter":{},"headers":[],"relativePath":"base/product/DDD可视化开发平台文档/快速入门/示例项目/步骤五：模型即代码.md","filePath":"base/product/DDD可视化开发平台文档/快速入门/示例项目/步骤五：模型即代码.md","lastUpdated":1706585121000}'),_={name:"base/product/DDD可视化开发平台文档/快速入门/示例项目/步骤五：模型即代码.md"},g=e('<h1 id="模型即代码" tabindex="-1">模型即代码 <a class="header-anchor" href="#模型即代码" aria-label="Permalink to &quot;模型即代码&quot;">​</a></h1><p>本文描述如何通过模型转换成为代码，直接生成即可运行，可以直接与前端进行联调，只要直接部署到开发环境即可。</p><h2 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h2><ul><li>使用idea插件生成代码</li><li>代码的结构</li><li>swagger 测试</li></ul><h2 id="使用idea插件生成代码" tabindex="-1">使用idea插件生成代码 <a class="header-anchor" href="#使用idea插件生成代码" aria-label="Permalink to &quot;使用idea插件生成代码&quot;">​</a></h2><ul><li>具体请参见 <a href="./../../操作指南/应用开发平台/IDEA插件集成.html">IDIA插件集成</a></li></ul><h2 id="代码的架构" tabindex="-1">代码的架构 <a class="header-anchor" href="#代码的架构" aria-label="Permalink to &quot;代码的架构&quot;">​</a></h2><ul><li><p>cola 架构</p><p><img src="'+l+'" alt="1702262211025"></p></li><li><p><strong>adapter</strong></p><ul><li><p>按业务域进行分包</p></li><li><p>按业务场景进行分包</p></li><li><p>controller的<code>api</code>接口</p></li></ul></li></ul><blockquote><p>适配层（Adapter Layer）：负责对前端展示（web，wireless，wap）的路由和适配，对于传统B/S系统而言，adapter就相当于MVC中的controller；</p></blockquote><p><strong>按业务域进行分包</strong></p><ul><li>请假</li><li>审批规则</li></ul><p><img src="'+s+'" alt="1702202102986"></p><p><strong>按业务场景进行分包</strong></p><ul><li>请假场景</li><li>审批场景</li></ul><p><img src="'+r+'" alt="1702202136736"></p><p><strong>controller的<code>api</code>接口</strong></p><blockquote><p>controller标准化代码生成</p></blockquote><p><img src="'+i+'" alt="1702202185998"></p><ul><li><p><strong>app</strong></p><ul><li>业务场景的应用服务</li><li>业务域的应用服务</li></ul><blockquote><p>应用层（Application Layer）：主要负责获取输入，组装上下文，参数校验，调用领域层做业务处理，如果需要的话，发送消息通知等。层次是开放的，应用层也可以绕过领域层，直接访问基础实施层</p></blockquote><p><strong>业务场景的应用服务</strong></p><p><img src="'+p+'" alt="1702202251348"></p><p><strong>业务域的应用服务</strong></p><p><img src="'+c+'" alt="1702202353571"></p></li><li><p><strong>client</strong></p><blockquote><p>Client模块（Client Module）：包含的代码应该是常见的服务接口Facade和DTO数据传输对象，如API、DTO、领域事件、Command和Query对象等等</p></blockquote></li></ul><p><img src="'+n+'" alt="1702202372380"></p><ul><li><p><strong>domain</strong></p><blockquote><p>领域层（Domain Layer）：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Domain Entity）的方法对App层提供业务实体和业务逻辑计算。领域是应用的核心，不依赖任何其他层次；</p></blockquote></li></ul><p><img src="'+d+'" alt="1702202511502"></p><ul><li><p><strong>infrastructure</strong></p><blockquote><p>基础实施层（Infrastructure Layer）：主要负责技术细节问题的处理，比如数据库的CRUD、搜索引擎、文件系统、分布式服务的RPC等。此外，领域防腐的重任也落在这里，外部依赖需要通过gateway的转义处理，才能被上面的App层和Domain层使用。</p></blockquote></li></ul><p><img src="'+u+'" alt="1702202540222"></p><h2 id="swagger-测试" tabindex="-1">swagger 测试 <a class="header-anchor" href="#swagger-测试" aria-label="Permalink to &quot;swagger 测试&quot;">​</a></h2><p>运行即显示swagger 地址进行测试。可直接链接数据库</p>',26),m=[g];function h(b,f,q,D,k,P){return a(),o("div",null,m)}const x=t(_,[["render",h]]);export{A as __pageData,x as default};
